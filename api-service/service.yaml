# ! name first letter has to be character
# apiVersion: batch/v1
# # kind: Deployment
# kind: Job
# metadata:
#   name: service-name
#   labels:
#     app: service-name
# spec:
#   # replicas: 1
#   # selector:
#   #   matchLabels:
#   #     app: service-name
#   template:
#     metadata:
#       labels:
#         app: service-name
#     spec:
#       restartPolicy: Never

# ! using Job instead of Deployment
# ! we want to run the pod & if the pod is inactive for `INACTIVITY_TIMEOUT` period it should be deleted
apiVersion: batch/v1
kind: Job
metadata:
  name: service-name
  labels:
    app: service-name
spec:
  backoffLimit: 0 # number of retries before marking the Job as failed
  ttlSecondsAfterFinished: 0 # time after which Job becomes eligible to be deleted immediately after it finished
  template:
    metadata:
      labels:
        app: service-name
    spec:
      restartPolicy: Never
      # ! create & attach a shared volume (initially empty) to the containers at /workspace
      # ! volume is deleted when the pod is deleted
      volumes:
        - name: workspace-volume
          emptyDir: {}
        - name: logs-volume
          hostPath:
            path: /custom_logs
            type: DirectoryOrCreate
      initContainers:
        - name: copy-s3-resources
          image: amazon/aws-cli
          command: ["/bin/sh", "-c"]
          args:
            - >
              aws s3 cp s3://replit-clone/code/service-name/ /workspace/ --recursive &&
              echo "Resources copied from S3";
          env:
            - name: AWS_ACCESS_KEY_ID
              value: "test"
            - name: AWS_SECRET_ACCESS_KEY
              value: "test"
            - name: AWS_ENDPOINT_URL
              value: "http://localstack-s3:4566"
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
        - name: change-volume-ownership
          image: busybox
          command: ["sh", "-c", "chown -R 1001:1001 /workspace"]
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
      containers:
        - name: runner
          # image: 100xdevs/runner:latest
          # ! ubuntu:20.04 for debugging
          # image: ubuntu:20.04
          # command: ["/bin/sh", "-c", "tail -f /dev/null"]
          image: rohitshah1706/replit_runner:latest
          env:
            - name: WORKSPACE_PATH
              value: "/home/abc/workspace"
            - name: LOGS_PATH
              value: "/home/root/custom_logs"
            - name: UID
              value: "1001"
            - name: GID
              value: "1001"
            - name: AWS_ACCESS_KEY_ID
              value: "test"
            - name: AWS_SECRET_ACCESS_KEY
              value: "test"
            - name: AWS_S3_ENDPOINT
              value: "http://localstack-s3:4566"
            - name: AWS_S3_BUCKET_NAME
              value: "replit-clone"
            - name: AWS_S3_BUCKET_REGION
              value: "us-east-1"
            - name: PROJECT_ID
              value: "service-name"
          ports:
            - containerPort: 1234 # websocket connection for runner
            - containerPort: 3000 # react/next.js application
            - containerPort: 5173 # vite
            - containerPort: 5000 # flask/django/fastapi application
          volumeMounts:
            - name: workspace-volume
              mountPath: /home/abc/workspace
            - name: logs-volume
              mountPath: /home/root/
          resources:
            requests:
              cpu: "1"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "1Gi"
---
apiVersion: v1
kind: Service
metadata:
  name: service-name
  # ! this is injected dynamically by the utils/k8s.ts:deployK8sManifests
  # ownerReferences:
  #   - apiVersion: batch/v1
  #     uid: service-name-uid # Replace with the Job's UID uid
  #     kind: Job
  #     name: service-name
spec:
  selector:
    app: service-name
  ports:
    - protocol: TCP
      name: ws
      port: 1234
      targetPort: 1234
    - protocol: TCP
      name: react
      port: 3000
      targetPort: 3000 # react/next.js application
    - protocol: TCP
      name: vite
      port: 5173
      targetPort: 5173 # vite
    - protocol: TCP
      name: flask
      port: 5000
      targetPort: 5000 # flask/django/fastapi application
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service-name
  # ! this is injected dynamically by the utils/k8s.ts:deployK8sManifests
  # ownerReferences:
  #   - apiVersion: batch/v1
  #     uid: service-name-uid # Replace with the Job's UID uid
  #     kind: Job
  #     name: service-name
spec:
  ingressClassName: nginx
  rules:
    - host: service-name.runner.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service-name
                port:
                  number: 1234
    - host: service-name-3000.runner.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service-name
                port:
                  number: 3000
    - host: service-name-5173.runner.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service-name
                port:
                  number: 5173
    - host: service-name-5000.runner.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service-name
                port:
                  number: 5000
